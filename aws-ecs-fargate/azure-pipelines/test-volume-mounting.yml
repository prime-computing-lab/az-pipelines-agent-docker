# Volume Mounting Test Pipeline
# Comprehensive test of volume mounting strategies in Docker-in-Docker
# Tests the Microsoft documentation scenarios for path mapping

trigger: none  # Manual trigger only

pool:
  name: demo-agent  # Change this to match your agent pool name

variables:
  - name: testId
    value: '$(Build.BuildId)'

stages:
- stage: VolumeDiscovery
  displayName: 'Volume Discovery and Analysis'
  jobs:
  - job: DiscoverPaths
    displayName: 'Discover Host and Container Paths'
    steps:
    - script: |
        echo "=== Volume Mounting Test - Path Discovery ==="
        echo "Test ID: $(testId)"
        echo "Agent: $(Agent.Name)"
        echo "Timestamp: $(date)"
        echo ""

        echo "=== Agent Container Path Analysis ==="
        echo "Current working directory: $(pwd)"
        echo "Agent work folder: $(Agent.WorkFolder)"
        echo "Pipeline workspace: $(Pipeline.Workspace)"
        echo "Home directory: $HOME"
        echo ""

        echo "=== Mount Point Analysis ==="
        echo "All mount points:"
        mount | grep -v "tmpfs\|proc\|sys\|dev" | head -10

        echo ""
        echo "Mount points containing 'azp' or relevant paths:"
        mount | grep -E "(azp|work|home)" || echo "No azp-related mounts found"

        echo ""
        echo "=== Directory Structure Analysis ==="
        echo "Contents of /home/azp:"
        ls -la /home/azp/

        echo ""
        echo "Contents of work directory:"
        ls -la $(Agent.WorkFolder)/ | head -10

        echo ""
        echo "Contents of pipeline workspace:"
        ls -la $(Pipeline.Workspace)/ | head -10

      displayName: 'Analyze Container Paths'

    - script: |
        echo "=== Docker Configuration Analysis ==="

        echo "Docker daemon info:"
        docker system info | grep -E "(Docker Root Dir|Data Space|Metadata Space|Storage Driver)" || echo "Storage info not available"

        echo ""
        echo "Docker inspect of our own container (if possible):"
        # Try to find our container by looking for the agent process
        CONTAINER_ID=$(docker ps --filter "ancestor=ubuntu:24.04" --format "{{.ID}}" | head -1)
        if [ ! -z "$CONTAINER_ID" ]; then
          echo "Found potential agent container: $CONTAINER_ID"
          docker inspect $CONTAINER_ID | jq '.[0].Mounts // .[0].HostConfig.Binds' 2>/dev/null || echo "Cannot inspect container mounts"
        else
          echo "Cannot identify agent container"
        fi

        echo ""
        echo "Host information visible from container:"
        cat /proc/mounts | grep -E "(azp|work|home)" | head -5 || echo "No relevant mounts in /proc/mounts"

      displayName: 'Analyze Docker Configuration'

- stage: VolumeTestingBasic
  displayName: 'Basic Volume Mounting Tests'
  dependsOn: VolumeDiscovery
  jobs:
  - job: BasicVolumeMounts
    displayName: 'Test Basic Volume Mount Scenarios'
    steps:
    - script: |
        echo "=== Creating Test Data ==="

        # Create test directories and files
        mkdir -p $(Pipeline.Workspace)/volume-test/source
        echo "Source data from $(Agent.Name) at $(date)" > $(Pipeline.Workspace)/volume-test/source/test-file.txt
        echo "Test ID: $(testId)" >> $(Pipeline.Workspace)/volume-test/source/test-file.txt

        mkdir -p $(Agent.WorkFolder)/volume-test/source
        echo "Work data from $(Agent.Name) at $(date)" > $(Agent.WorkFolder)/volume-test/source/work-test-file.txt

        # Create in home directory
        mkdir -p /home/azp/volume-test/source
        echo "Home data from $(Agent.Name) at $(date)" > /home/azp/volume-test/source/home-test-file.txt

        echo "Test data created successfully"

      displayName: 'Create Test Data'

    - script: |
        echo "=== Test 1: Pipeline Workspace Volume Mount ==="

        echo "Attempting to mount $(Pipeline.Workspace)/volume-test into container..."

        docker run --rm \
          -v $(Pipeline.Workspace)/volume-test:/mounted-data \
          alpine:latest \
          sh -c "
            echo 'Container sees mounted data:'
            ls -la /mounted-data/
            echo ''
            echo 'Contents of source directory:'
            ls -la /mounted-data/source/ 2>/dev/null || echo 'Source directory not found'
            echo ''
            echo 'File contents:'
            cat /mounted-data/source/test-file.txt 2>/dev/null || echo 'Test file not found'
            echo ''
            echo 'Creating file from container:'
            echo 'Created from inner container at $(date)' > /mounted-data/from-container.txt
          "

        echo "Checking if file was created by container:"
        if [ -f "$(Pipeline.Workspace)/volume-test/from-container.txt" ]; then
          echo "✓ SUCCESS: Container can write to mounted volume"
          cat $(Pipeline.Workspace)/volume-test/from-container.txt
        else
          echo "✗ FAILED: Container cannot write to mounted volume"
        fi

      displayName: 'Test Pipeline Workspace Mount'

    - script: |
        echo "=== Test 2: Agent Work Directory Volume Mount ==="

        echo "Attempting to mount $(Agent.WorkFolder)/volume-test into container..."

        docker run --rm \
          -v $(Agent.WorkFolder)/volume-test:/mounted-work \
          alpine:latest \
          sh -c "
            echo 'Container sees work directory mount:'
            ls -la /mounted-work/
            echo ''
            echo 'Work file contents:'
            cat /mounted-work/source/work-test-file.txt 2>/dev/null || echo 'Work test file not found'
            echo ''
            echo 'Creating work file from container:'
            echo 'Work file created from inner container at $(date)' > /mounted-work/work-from-container.txt
          "

        echo "Checking if work file was created by container:"
        if [ -f "$(Agent.WorkFolder)/volume-test/work-from-container.txt" ]; then
          echo "✓ SUCCESS: Container can write to work directory mount"
          cat $(Agent.WorkFolder)/volume-test/work-from-container.txt
        else
          echo "✗ FAILED: Container cannot write to work directory mount"
        fi

      displayName: 'Test Work Directory Mount'

    - script: |
        echo "=== Test 3: Home Directory Volume Mount ==="

        echo "Attempting to mount /home/azp/volume-test into container..."

        docker run --rm \
          -v /home/azp/volume-test:/mounted-home \
          alpine:latest \
          sh -c "
            echo 'Container sees home directory mount:'
            ls -la /mounted-home/
            echo ''
            echo 'Home file contents:'
            cat /mounted-home/source/home-test-file.txt 2>/dev/null || echo 'Home test file not found'
            echo ''
            echo 'Creating home file from container:'
            echo 'Home file created from inner container at $(date)' > /mounted-home/home-from-container.txt
          "

        echo "Checking if home file was created by container:"
        if [ -f "/home/azp/volume-test/home-from-container.txt" ]; then
          echo "✓ SUCCESS: Container can write to home directory mount"
          cat /home/azp/volume-test/home-from-container.txt
        else
          echo "✗ FAILED: Container cannot write to home directory mount"
        fi

      displayName: 'Test Home Directory Mount'

- stage: VolumeTestingAdvanced
  displayName: 'Advanced Volume Mounting Tests'
  dependsOn: VolumeTestingBasic
  jobs:
  - job: AdvancedVolumeMounts
    displayName: 'Test Microsoft Documentation Scenarios'
    steps:
    - script: |
        echo "=== Test 4: Multi-Stage Volume Mount Test ==="
        echo "Testing the Microsoft documentation pattern of path references"

        # Create a complex directory structure for testing
        mkdir -p $(Pipeline.Workspace)/complex-test/{input,output,shared}
        echo "Input data for multi-stage test" > $(Pipeline.Workspace)/complex-test/input/data.txt
        echo "Test ID: $(testId)" >> $(Pipeline.Workspace)/complex-test/input/data.txt

        echo "Stage 1: Container processes input and creates intermediate data"
        docker run --rm \
          -v $(Pipeline.Workspace)/complex-test:/workspace \
          alpine:latest \
          sh -c "
            echo 'Processing input data...'
            cat /workspace/input/data.txt
            echo ''
            echo 'Creating intermediate data...'
            echo 'Processed by container 1 at $(date)' > /workspace/shared/intermediate.txt
            cat /workspace/input/data.txt >> /workspace/shared/intermediate.txt
          "

        echo "Stage 2: Another container uses intermediate data"
        docker run --rm \
          -v $(Pipeline.Workspace)/complex-test:/workspace \
          alpine:latest \
          sh -c "
            echo 'Reading intermediate data...'
            cat /workspace/shared/intermediate.txt
            echo ''
            echo 'Creating final output...'
            echo 'Final processing by container 2 at $(date)' > /workspace/output/final.txt
            cat /workspace/shared/intermediate.txt >> /workspace/output/final.txt
          "

        echo "Verifying multi-stage results:"
        if [ -f "$(Pipeline.Workspace)/complex-test/output/final.txt" ]; then
          echo "✓ SUCCESS: Multi-stage volume mounting works"
          echo "Final output:"
          cat $(Pipeline.Workspace)/complex-test/output/final.txt
        else
          echo "✗ FAILED: Multi-stage volume mounting failed"
        fi

      displayName: 'Test Multi-Stage Volumes'

    - script: |
        echo "=== Test 5: Volume Mount with Environment Variables ==="
        echo "Testing path mapping with environment variables (Microsoft pattern)"

        # Set environment variable for container
        DIND_WORKSPACE=$(Pipeline.Workspace)/env-test
        mkdir -p $DIND_WORKSPACE

        echo "Using environment variable DIND_WORKSPACE: $DIND_WORKSPACE"
        echo "Environment test data" > $DIND_WORKSPACE/env-data.txt

        docker run --rm \
          -v $DIND_WORKSPACE:/env-workspace \
          -e INNER_VAR="/env-workspace" \
          alpine:latest \
          sh -c "
            echo 'Environment variable test:'
            echo 'INNER_VAR is set to: $INNER_VAR'
            echo 'Contents of INNER_VAR directory:'
            ls -la $INNER_VAR/
            echo 'Reading file:'
            cat $INNER_VAR/env-data.txt
            echo 'Creating file using environment variable:'
            echo 'Created using env var at $(date)' > $INNER_VAR/env-created.txt
          "

        echo "Verifying environment variable results:"
        if [ -f "$DIND_WORKSPACE/env-created.txt" ]; then
          echo "✓ SUCCESS: Environment variable volume mounting works"
          cat $DIND_WORKSPACE/env-created.txt
        else
          echo "✗ FAILED: Environment variable volume mounting failed"
        fi

      displayName: 'Test Environment Variable Mounts'

    - script: |
        echo "=== Test 6: Host Path Discovery Test ==="
        echo "Attempting to understand the host path mapping"

        # Try to discover how our agent paths map to host paths
        echo "Creating unique test file for path discovery..."
        UNIQUE_FILE="path-discovery-$(testId).txt"
        echo "Unique file for path discovery" > $(Pipeline.Workspace)/$UNIQUE_FILE

        echo "Searching for this file from inside a container to understand path mapping..."
        docker run --rm \
          -v /:/host-root \
          alpine:latest \
          sh -c "
            echo 'Searching for our unique file in host filesystem...'
            find /host-root -name '$UNIQUE_FILE' -type f 2>/dev/null | head -5
            echo ''
            echo 'If found, this shows the actual host path mapping:'
          " | grep -v "Permission denied" || echo "Host root filesystem not accessible"

        echo ""
        echo "Alternative: Checking common Docker mount locations..."
        docker run --rm \
          -v /var/lib/docker:/docker-data \
          alpine:latest \
          sh -c "
            echo 'Docker data directory structure:'
            ls -la /docker-data/ | head -10
          " 2>/dev/null || echo "Docker data directory not accessible"

      displayName: 'Test Host Path Discovery'

- stage: VolumeTestingSummary
  displayName: 'Volume Test Summary and Cleanup'
  dependsOn: VolumeTestingAdvanced
  condition: always()
  jobs:
  - job: SummaryAndCleanup
    displayName: 'Generate Summary Report'
    steps:
    - script: |
        echo "=== Volume Mounting Test Summary ==="
        echo "Test ID: $(testId)"
        echo "Completed at: $(date)"
        echo "Agent: $(Agent.Name)"
        echo ""

        echo "=== Test Results Overview ==="
        echo "Check the logs above for detailed results, but here's what to look for:"
        echo ""
        echo "✓ EXPECTED SUCCESS: Basic volume mounts should work if your docker-compose uses volumes"
        echo "✓ EXPECTED SUCCESS: File creation from containers should persist on agent"
        echo "? VARIABLE: Host path discovery depends on Docker daemon configuration"
        echo ""
        echo "=== Key Learning Points ==="
        echo "1. Volume paths in inner containers are relative to HOST, not agent container"
        echo "2. Agent container paths like $(Pipeline.Workspace) work if they map to host paths"
        echo "3. Multi-stage container operations can share data through mounted volumes"
        echo "4. Environment variables can simplify path management in complex scenarios"
        echo ""
        echo "=== Files Created During Test ==="
        echo "Pipeline workspace files:"
        find $(Pipeline.Workspace) -name "*$(testId)*" -o -name "*from-container*" -o -name "*env-created*" 2>/dev/null || echo "No test files found"

        echo ""
        echo "Work directory files:"
        find $(Agent.WorkFolder) -name "*from-container*" 2>/dev/null || echo "No work files found"

        echo ""
        echo "Home directory files:"
        find /home/azp -name "*from-container*" 2>/dev/null || echo "No home files found"

      displayName: 'Generate Summary Report'

    - script: |
        echo "=== Cleanup Test Files ==="

        rm -rf $(Pipeline.Workspace)/volume-test 2>/dev/null || echo "Pipeline volume-test cleanup not needed"
        rm -rf $(Pipeline.Workspace)/complex-test 2>/dev/null || echo "Pipeline complex-test cleanup not needed"
        rm -rf $(Pipeline.Workspace)/env-test 2>/dev/null || echo "Pipeline env-test cleanup not needed"
        rm -f $(Pipeline.Workspace)/path-discovery-$(testId).txt 2>/dev/null || echo "Path discovery file cleanup not needed"

        rm -rf $(Agent.WorkFolder)/volume-test 2>/dev/null || echo "Work volume-test cleanup not needed"
        rm -rf /home/azp/volume-test 2>/dev/null || echo "Home volume-test cleanup not needed"

        echo "Test cleanup completed"

      displayName: 'Cleanup Test Files'