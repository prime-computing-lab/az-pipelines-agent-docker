# Test Pipeline 6 - Matrix Deployment to Dev and Prod Environments
# Demonstrates matrix deployment strategy using Azure Pipelines
# Based on test-pipeline5.yml but restructured to use matrix for multiple environment deployments

trigger: none  # Manual trigger only for demo purposes

pool:
  name: demo-agent  # Change this to match your agent pool name

variables:
  - group: dev

stages:
- stage: AcquireCredentials
  displayName: 'Stage 1: Acquire AWS Temporary Credentials'
  jobs:
  - job: GetAWSCredentials
    displayName: 'Acquire AWS Temporary Credentials'
    steps:
    - bash: wget https://rolesanywhere.amazonaws.com/releases/1.7.1/Aarch64/Linux/Amzn2023/aws_signing_helper; chmod +x aws_signing_helper; # https://docs.aws.amazon.com/rolesanywhere/latest/userguide/credential-helper.html
      displayName: Install AWS Signer

    - task: DownloadSecureFile@1
      name: Certificate
      displayName: 'Download certificate'
      inputs:
        secureFile: 'certificate.crt'

    - task: DownloadSecureFile@1
      name: Privatekey
      displayName: 'Download private key'
      inputs:
        secureFile: 'private.key'

    - bash: |
        set -e
        echo "Setting up AWS credential process..."
        aws configure set credential_process "./aws_signing_helper credential-process --certificate $(Certificate.secureFilePath) --private-key $(Privatekey.secureFilePath) --trust-anchor-arn $(TRUSTANCHORARN) --profile-arn $(PROFILEARN) --role-arn $(ROLEARN)" --profile default
        
        echo "Enabling AWS SDK config loading..."
        export AWS_SDK_LOAD_CONFIG=1
        
        echo "Testing credential acquisition..."
        aws sts get-caller-identity
        
        echo "Extracting temporary credentials..."
        CREDS_JSON=$(./aws_signing_helper credential-process --certificate $(Certificate.secureFilePath) --private-key $(Privatekey.secureFilePath) --trust-anchor-arn $(TRUSTANCHORARN) --profile-arn $(PROFILEARN) --role-arn $(ROLEARN))
        
        AWS_ACCESS_KEY_ID=$(echo $CREDS_JSON | jq -r '.AccessKeyId')
        AWS_SECRET_ACCESS_KEY=$(echo $CREDS_JSON | jq -r '.SecretAccessKey')
        AWS_SESSION_TOKEN=$(echo $CREDS_JSON | jq -r '.SessionToken')
        EXPIRATION=$(echo $CREDS_JSON | jq -r '.Expiration')
        
        if [ "$AWS_ACCESS_KEY_ID" = "null" ] || [ -z "$AWS_ACCESS_KEY_ID" ]; then
          echo "ERROR: Failed to extract AWS_ACCESS_KEY_ID"
          exit 1
        fi
        
        if [ "$AWS_SECRET_ACCESS_KEY" = "null" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "ERROR: Failed to extract AWS_SECRET_ACCESS_KEY" 
          exit 1
        fi
        
        if [ "$AWS_SESSION_TOKEN" = "null" ] || [ -z "$AWS_SESSION_TOKEN" ]; then
          echo "ERROR: Failed to extract AWS_SESSION_TOKEN"
          exit 1
        fi
        
        echo "Successfully extracted temporary credentials"
        echo "Credentials expire at: $EXPIRATION"
        
        echo "##vso[task.setvariable variable=awsAccessKeyId;isOutput=true]$AWS_ACCESS_KEY_ID"
        echo "##vso[task.setvariable variable=awsSecretAccessKey;isOutput=true]$AWS_SECRET_ACCESS_KEY" 
        echo "##vso[task.setvariable variable=awsSessionToken;isOutput=true]$AWS_SESSION_TOKEN"
        echo "##vso[task.setvariable variable=awsExpiration;isOutput=true]$EXPIRATION"
        echo "##vso[task.setvariable variable=credentialsReady;isOutput=true]true"
        
        echo "Stage 1 Complete: AWS credentials exported for matrix deployment"
      name: extractCredentials
      displayName: 'Extract AWS Temporary Credentials for Matrix Deployment'

- stage: MatrixDeployment
  displayName: 'Stage 2: Matrix Deployment to Dev and Prod Environments'
  dependsOn: AcquireCredentials
  jobs:
  - job: DeployToEnvironments
    displayName: 'Deploy to Multiple Environments using Matrix'
    strategy:
      maxParallel: 2
      matrix: 
        dev_environment:
          Environment: dev
          DeploymentPrefix: dev
        prod_environment:
          Environment: prod
          DeploymentPrefix: prod
    variables:
      AWS_ACCESS_KEY_ID: $[stageDependencies.AcquireCredentials.GetAWSCredentials.outputs['extractCredentials.awsAccessKeyId']]
      AWS_SECRET_ACCESS_KEY: $[stageDependencies.AcquireCredentials.GetAWSCredentials.outputs['extractCredentials.awsSecretAccessKey']]
      AWS_SESSION_TOKEN: $[stageDependencies.AcquireCredentials.GetAWSCredentials.outputs['extractCredentials.awsSessionToken']]
      awsExpiration: $[stageDependencies.AcquireCredentials.GetAWSCredentials.outputs['extractCredentials.awsExpiration']]
      AWS_DEFAULT_REGION: $(awsRegion)
    steps:
    - bash: |
        echo "ðŸš€ Matrix Deployment to $(Environment) Environment"
        echo "Environment: $(Environment)"
        echo "Deployment Prefix: $(DeploymentPrefix)"
        echo "Credentials expire at: $(awsExpiration)"
        
        echo "Testing AWS CLI with temporary credentials from Stage 1..."
        aws sts get-caller-identity
        
        if [ $? -eq 0 ]; then
          echo "AWS credentials are working correctly for $(Environment)!"
        else
          echo "AWS credentials failed for $(Environment)"
          exit 1
        fi
      displayName: 'Validate AWS Credentials for $(Environment)'
      
    - bash: |
        echo "ðŸ”§ Performing $(Environment) Environment Deployment Tasks..."
        
        echo "--- $(Environment) Environment Information ---"
        echo "Deploying to: $(Environment)"
        echo "Deployment Prefix: $(DeploymentPrefix)"
        
        echo "--- AWS Account Information ---"
        aws sts get-caller-identity
        
        echo "--- Available AWS Regions ---"
        aws ec2 describe-regions --query 'Regions[*].RegionName' --output table || echo "EC2 describe-regions failed (may need permissions)"
        
        echo "--- S3 Operations for $(Environment) ---"
        aws s3 ls || echo "S3 ls failed (may need permissions or no buckets exist)"
        
        echo "--- Simulating $(Environment) Environment Specific Tasks ---"
        if [ "$(Environment)" = "dev" ]; then
          echo "âœ… Development environment tasks:"
          echo "  - Deploy to development infrastructure"
          echo "  - Run development-specific health checks"
          echo "  - Configure development monitoring"
        elif [ "$(Environment)" = "prod" ]; then
          echo "âœ… Production environment tasks:"
          echo "  - Deploy to production infrastructure with zero downtime"
          echo "  - Run production health checks"
          echo "  - Configure production monitoring and alerting"
          echo "  - Update production documentation"
        fi
        
        echo "$(Environment) Deployment Complete: Successfully deployed using matrix strategy"
      displayName: 'Deploy to $(Environment) Environment'